float getData1(global float * data, int i)
{
    return (float)(data[i]);
}

float setDataInt(global int * dataout, int i, int datain)
{
    dataout[i] = datain;
}

float setData1(global float * dataout, int i, float datain)
{
    dataout[i] = datain;
}
//////////////////////////////////////////////////////
kernel void sandModel( 
                 int h_length, 
                 global float * h ,
                 int dir_length, 
                 global int * dir ,
                 int neighbours_length, 
                 global int * neighbours_index, 
                  global int * neighbours ,
                 float  threshold ,
                 float  mass 
)
{
    int idx = get_global_id(0);
    if (idx >= h_length)
        return;
        
    float height = getData1(h, idx); // current point height
    
    int nstart = neighbours_index[idx];
    int nend = neighbours_index[idx+1];

    // Array of points with valid threshold
    for (int nidx = nstart; nidx < nend; ++nidx)
    {
        int nptidx = neighbours[nidx]; // near point index
        float nptH = getData1(h, nptidx); // near point height
        float dif = (height - nptH) >= threshold; // distance between peak and low nearpoints
        if (dif)
        {
            setDataInt(dir, idx, nptidx);
            height -= mass;
            setData1(h, idx, height);
            break;
        }
    }
}
