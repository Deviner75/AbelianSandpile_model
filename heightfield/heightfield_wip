static uint random(float seed, int idx) {
    uint s = *(uint*)(&seed);
    s ^= idx << 3;
    s *= 179424691;
    s ^= s << 13 | s >> (32-13);
    s ^= s >> 17 | s << (32-17);
    s ^= s << 23;
    s *= 179424691;
    s = s % 9;
    return s;
}

kernel void sandDunes( 
                 int height_stride_x, 
                 int height_stride_y, 
                 int height_stride_z, 
                 int height_stride_offset, 
                 int height_res_x, 
                 int height_res_y, 
                 int height_res_z, 
                 global float * height ,
                 global float * mask ,
                 int dir_stride_x, 
                 int dir_stride_y, 
                 int dir_stride_z, 
                 int dir_stride_offset, 
                 int dir_res_x, 
                 int dir_res_y, 
                 int dir_res_z, 
                 global float * dir ,
                 float  treshold ,
                 float  mass ,
                 int     resy ,
                 int     resx 
)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int idx = height_stride_offset + height_stride_x * gidx
                                   + height_stride_y * gidy;
                               
    float xo[] = {-1, 0, 1,
                  -1, 0, 1,
                  -1, 0, 1};

    float yo[] = {1, 1, 1,
                  0, 0, 0,
                 -1,-1,-1};
               
    int n[] =   {0, 0, 0,
                 0, 0, 0,
                 0, 0, 0};
                                 
                  
    dir[idx] = -1;
    
    for(int i=0; i<9; i++)
    {
        int x1 = (gidx + xo[i]);
        int y1 = (gidy + yo[i]);
        
        if (x1<0) x1 = 0;
        if (x1>resx-1) x1 = resx-1;
        if (y1<0) y1 = 0;
        if (y1>resy-1) y1 = resy-1;
        
        int ndx = height_stride_offset + height_stride_x * x1
                                       + height_stride_y * y1;
        
        n[i] = ndx;
    }

    for(int i=0; i<9; i++)
    {
        uint randval = random(i, idx);
        
        int nptidx = n[randval];
        int dif = (height[idx] - height[nptidx]) >= treshold;
        if (dif)
        {
            dir[idx] = nptidx;
            height[idx] -= mass * mask[idx];
            break;
        }
    }
}

kernel void sandDunesH( 
                 int height_stride_x, 
                 int height_stride_y, 
                 int height_stride_z, 
                 int height_stride_offset, 
                 int height_res_x, 
                 int height_res_y, 
                 int height_res_z, 
                 global float * height ,
                 global float * mask ,
                 int dir_stride_x, 
                 int dir_stride_y, 
                 int dir_stride_z, 
                 int dir_stride_offset, 
                 int dir_res_x, 
                 int dir_res_y, 
                 int dir_res_z, 
                 global float * dir ,
                 float  treshold ,
                 float  mass ,
                 int     resy ,
                 int     resx 
)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int idx = height_stride_offset + height_stride_x * gidx
                                   + height_stride_y * gidy;
                           
    float xo[] = {-1, 0, 1,
                  -1, 0, 1,
                  -1, 0, 1};

    float yo[] = {1, 1, 1,
                  0, 0, 0,
                 -1,-1,-1};
               
    int n[] =   {0, 0, 0,
                 0, 0, 0,
                 0, 0, 0};
                                  
                  
   
    for(int i=0; i<9; i++)
    {
        int x1 = (gidx + xo[i]);
        int y1 = (gidy + yo[i]);
        
        if (x1<0) x1 = 0;
        if (x1>resx-1) x1 = resx-1;
        if (y1<0) y1 = 0;
        if (y1>resy-1) y1 = resy-1;
        
        int ndx = height_stride_offset + height_stride_x * x1
                                       + height_stride_y * y1;
        
        n[i] = ndx;
    }
    
    for(int i=0; i<9; i++)
    {
        if (dir[n[i]] == idx)
        {
            height[idx] += mass * mask[idx];
        }        
    }
}
